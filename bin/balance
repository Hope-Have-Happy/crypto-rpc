#!/usr/bin/env node

/**
 * BalanceProgram
 *
 * @param config
 * ETHNode: {
 *  host: 'localhost',
 *  rpcPort: '8545',
 *  protocol: 'http',
 *  currencies : {
 *    GUSD: {
 *      tokenContractAddress: '0xd0683a2f4e9ecc9ac6bb41090b4269f7cacdd5d4'
 *    },
 *    USDC: {
 *      tokenContractAddress: '0xc92e381c387edbfd2e2112f3054896dd20ac3d31'
 *    }
 *  }
 *}
 */
function BalanceProgram(config) {
  const program = require('commander');
  const CryptoRPC = require('../rpcs');
  const util = require('util');

  try{
    program
      .option('--node <node>')
      .option('--currency <currency>')
      .option('--address <address>')
      .parse(process.argv);
  } catch (e) {
    console.log(e.message);
    return program.help()
  }

  async function main() {
    const { node, currency, address } = program;
    const rpcHost = config[node];
    if(rpcHost) {
      const { host, rpcPort, protocol, user, pass } = rpcHost;
      const currencyConfig = rpcHost.currencies[currency] || {};
      let rpcs = new CryptoRPC({
        host,
        rpcPort,
        user,
        pass,
        protocol,
      }, currencyConfig);

      rpcs.getBalance(currency, address, (err, balance) => {
        if(err) console.error(err);
        console.log(`${currency} ${util.inspect(balance)}`)
      });
    } else {
      console.error('ERROR: ');
    }
  }
  main();
}

if (require.main === module) {
  const config = require('../config');
  BalanceProgram(config);
}

module.exports = BalanceProgram;
