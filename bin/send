#!/usr/bin/env node
const program = require('commander');
program
  .option('--node <node>')
  .option('--currency <currency>')
  .option('--address <address>')
  .option('--amount <amount>')

/**
 * SendProgram
 *
 * @param config
 * ETHNode: {
 *  host: 'localhost',
 *  rpcPort: '8545',
 *  protocol: 'http',
 *  currencies : {
 *    GUSD: {
 *      tokenContractAddress: '0xd0683a2f4e9ecc9ac6bb41090b4269f7cacdd5d4'
 *    },
 *    USDC: {
 *      tokenContractAddress: '0xc92e381c387edbfd2e2112f3054896dd20ac3d31'
 *    }
 *  }
 *}
 */
const SendProgram = {
  program,
  start: (config, program) => {
    const CryptoRPC = require('../rpcs');
    const util = require('util');


    async function main() {
      const { node, currency, address, amount } = program;
      const rpcHost = config[node];
      if(rpcHost) {
        const { host, rpcPort, protocol, user, pass } = rpcHost;
        const currencyConfig = rpcHost.currencies[currency] || {};
        let rpcs = new CryptoRPC({
          host,
          rpcPort,
          user,
          pass,
          protocol,
        }, currencyConfig);

        rpcs.cmdlineUnlock(currency, 10000, (err, lockFn) => {
          rpcs.sendToAddress(currency, address, amount, (err, tx) => {
            if(err) console.error(err);
            console.log(tx);
            lockFn();
          });
        });
      } else {
        console.error('ERROR: Node is not in the config');
      }
    }
    main();
  }
};


if (require.main === module) {
  const config = require('../config');
  try{
    program.parse(process.argv);
    SendProgram.start(config, program);
  } catch (e) {
    console.log(e.message);
    return program.help()
  }
}


module.exports = SendProgram;
